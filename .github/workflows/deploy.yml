name: Build, Push, and Deploy Frontend and Backend

on:
  push:
    branches: [ main ]

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build and push client
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY_FRONTEND }}
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:latest ./client
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest

      - name: Build and push server
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY_BACKEND }}
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:latest ./server
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest

      - name: Deploy client via SSM
        run: |
          INSTANCE_ID=${{ secrets.FRONTEND_EC2_ID }}
          aws ssm send-command \
            --targets "Key=InstanceIds,Values=$INSTANCE_ID" \
            --document-name "AWS-RunShellScript" \
            --comment "Deploy frontend container" \
            --parameters 'commands=[
              "set -e",
              "echo Logging into ECR...",
              "aws ecr get-login-password --region ${{ secrets.AWS_REGION }} | sudo docker login --username AWS --password-stdin ${{ steps.login-ecr.outputs.registry }}",
              "echo Pulling latest frontend image...",
              "sudo docker pull ${{ steps.login-ecr.outputs.registry }}/${{ secrets.ECR_REPOSITORY_FRONTEND }}:latest",
              "echo Stopping old container if exists...",
              "sudo docker stop frontend || true",
              "sudo docker rm frontend || true",
              "echo Running new container...",
              "sudo docker run -d -p 80:80 --name frontend ${{ steps.login-ecr.outputs.registry }}/${{ secrets.ECR_REPOSITORY_FRONTEND }}:latest",
              "echo Deployment finished."
            ]'

      - name: Deploy server via SSM
        run: |
          INSTANCE_ID=${{ secrets.BACKEND_EC2_ID }}
          aws ssm send-command \
            --targets "Key=InstanceIds,Values=$INSTANCE_ID" \
            --document-name "AWS-RunShellScript" \
            --comment "Deploy backend container" \
            --parameters 'commands=[
              "set -e",
              "echo Logging into ECR...",
              "aws ecr get-login-password --region ${{ secrets.AWS_REGION }} | sudo docker login --username AWS --password-stdin ${{ steps.login-ecr.outputs.registry }}",
              "echo Pulling latest backend image...",
              "sudo docker pull ${{ steps.login-ecr.outputs.registry }}/${{ secrets.ECR_REPOSITORY_BACKEND }}:latest",
              "echo Stopping old container if exists...",
              "sudo docker stop backend || true",
              "sudo docker rm backend || true",
              "echo Running new container...",
              "sudo docker run -d -p 5000:5000 --name backend ${{ steps.login-ecr.outputs.registry }}/${{ secrets.ECR_REPOSITORY_BACKEND }}:latest",
              "echo Deployment finished."
            ]'
