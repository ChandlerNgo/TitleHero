name: Build, Push, and Deploy Frontend and Backend

on:
  push:
    branches: [ main ]

jobs:
  build-and-push:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build and push client
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY_FRONTEND }}
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:latest ./client
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest

      - name: Build and push server
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY_BACKEND }}
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:latest ./server
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest

      - name: Deploy client to EC2
        uses: webfactory/ssh-agent@v0.9.1
        with:
          ssh-private-key: ${{ secrets.EC2_SSH_KEY }}

      - name: SSH client and update container
        run: |
          ssh -o StrictHostKeyChecking=no ubuntu@${{ secrets.FRONTEND_EC2_IP }} << 'EOF'
            aws ecr get-login-password --region ${{ secrets.AWS_REGION }} | \
            docker login --username AWS --password-stdin ${{ steps.login-ecr.outputs.registry }}
            docker pull ${{ steps.login-ecr.outputs.registry }}/${{ secrets.ECR_REPOSITORY_FRONTEND }}:latest
            docker stop frontend || true
            docker rm frontend || true
            docker run -d -p 80:80 --name frontend ${{ steps.login-ecr.outputs.registry }}/${{ secrets.ECR_REPOSITORY_FRONTEND }}:latest
          EOF

      - name: SSH and update server via bastion
        run: |
          ssh -A -o StrictHostKeyChecking=no ubuntu@${{ secrets.FRONTEND_EC2_IP }} -t \
          ssh ubuntu@${{ secrets.BACKEND_PRIVATE_IP }} << 'EOF'
            aws ecr get-login-password --region ${{ secrets.AWS_REGION }} | \
            docker login --username AWS --password-stdin ${{ steps.login-ecr.outputs.registry }}
            docker pull ${{ steps.login-ecr.outputs.registry }}/${{ secrets.ECR_REPOSITORY_BACKEND }}:latest
            docker stop backend || true
            docker rm backend || true
            docker run -d -p 5000:5000 --name backend ${{ steps.login-ecr.outputs.registry }}/${{ secrets.ECR_REPOSITORY_BACKEND }}:latest
          EOF